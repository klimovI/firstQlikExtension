{
  "env": {
    "browser": true,
    "es6": true
  },
  "extends": [
    "airbnb-base"
  ],
  "plugins": [
    "jsdoc"
  ],
  "rules": {
    /*
      ----------------------------------------
         eslint air-bnb rules customization
      ----------------------------------------
    */

    // Sets line break to Windows CRLF.
    "linebreak-style": "off",

    // Allows writting arrow-function params without ().
    "arrow-parens": [
      "error",
      "as-needed"
    ],

    // Enables i++.
    "no-plusplus": "off",

    /*
      Allows writting records like

      const foo =
        superLongLongLongLongLongLongLongLongFunctionName();
    */
    "operator-linebreak": "off",

    // Allows records like 0 == false.
    "eqeqeq": "off",

    // Allows to skip using braces in switch-case blocks.
    "no-case-declarations": "off",

    /*
      Denies adding comma at the end like

      const foo = {
        bar: "baz",
        qux: "quux",
      };
    */
    "comma-dangle": [
      "error",
      "never"
    ],

    // Allows records like this.foo_ = true;
    "no-underscore-dangle": "off",

    /*
        Limits max finction size to 40 lines.
        Skips comments, considers blank lines.
        Disabled for a while.
    */
    // "max-lines-per-function": ["error", {"max": 40, "skipComments": true}],

    /*
        Limits the allowed number of paramters in function.
        Max allowed is 4.
        Disabled for a while.
    */
    // "max-params": ["error", 4],

    // Limits the cyclomatic complexity.
    "complexity": [
      "error",
      15
    ],

    /*
        Limits max nested callbacks count like

        foo1(function() {
          foo2(function() {
            foo3(function() {
              foo4(function() {
                // Do something
              });
            });
          });
        });
    */
    "max-nested-callbacks": [
      "error",
      2
    ],

    // Allows writting void 0 instead of undefined.
    "no-void": "off",

    /*
        Allows param reassign like

        function foo(bar) {
          bar.prop = "value";
        }

        but not

        function foo(bar) {
          bar = 13;
        }
    */
    "no-param-reassign": [
      "error",
      {
        "props": false
      }
    ],

    /*
      ----------------------------------------
         eslint jsdoc rules customization
      ----------------------------------------
    */

    "jsdoc/check-alignment": 1, // Recommended
    "jsdoc/check-examples": 1,
    "jsdoc/check-indentation": 0,
    "jsdoc/check-param-names": 1, // Recommended
    "jsdoc/check-syntax": 1,
    "jsdoc/check-tag-names": 1, // Recommended
    "jsdoc/check-types": 0, // Recommended
    "jsdoc/implements-on-classes": 1, // Recommended
    "jsdoc/match-description": 1,
    "jsdoc/newline-after-description": 0, // Recommended
    "jsdoc/no-types": 0,
    "jsdoc/no-undefined-types": 1, // Recommended
    "jsdoc/require-description": 1,
    "jsdoc/require-description-complete-sentence": 1,
    "jsdoc/require-example": 0,
    "jsdoc/require-hyphen-before-param-description": 1,
    "jsdoc/require-jsdoc": 1, // Recommended
    "jsdoc/require-param": 1, // Recommended
    "jsdoc/require-param-description": 1, // Recommended
    "jsdoc/require-param-name": 1, // Recommended
    "jsdoc/require-param-type": 1, // Recommended
    "jsdoc/require-returns": 1, // Recommended
    "jsdoc/require-returns-check": 1, // Recommended
    "jsdoc/require-returns-description": 1, // Recommended
    "jsdoc/require-returns-type": 1, // Recommended
    "jsdoc/valid-types": 1 // Recommended
  }
}
